Prompt:
1) You are a software tester, who has to identify key features to be tested based on the document and list out all testing scenarios.  
2) Can you create the test cases to test all possible MSG-GEN-01 scenario including boundry conditions, edge case, happy path, negative scenrios, regression, volume/load scenario, network failure, concurrency, infra, privacy, security and vulunarability
3) Generate synthetic data for all these scenarios.
4) document all the prompts and output into word document "test_cases"
5) Create the python code to test each test case, withthe test data provided using the synthetic data create in step #3. 
6) Write the output of the test automation in excel file in "result" folder 

Prompt/Output:
Testing Focus

RTGS message lifecycle (generate → validate → authorize → transmit → acknowledge) across MT-102/103/202/199.
Branch vs HO entitlements, time windows, limits, and six-eye authorization workflow.
Integration touchpoints: Core Banking postings, PRISM/central bank interface, treasury review, cancellation rollback.
Charge computation (branch-wise rates, FED), reporting outputs, dashboards, and audit trail completeness.
Exception handling: validation failures, queue routing (STP vs non-STP), cut-off breaches, incorrect account/title (MT-199), retries.
Test Scenarios

MSG-GEN-01 Verify branch user can create MT-102/103 only for their logged-in branch; cross-branch attempt rejected.
MSG-GEN-02 Confirm mandatory fields per message type enforced with schema validation and BIC directory lookup.
MSG-GEN-03 Ensure amount exceeding branch limit triggers HO authorization requirement and blocks STP queue.
AUTH-01 Validate six-eye authorization path: preparer → branch verifier → HO approver, with full audit trail.
AUTH-02 Check authorization timeout or rejection returns transaction to branch queue with status “Sent back to operator”.
VALID-01 Confirm message validation catches missing fields (e.g., 50K/57A/57D/72) and routes to non-STP queue with error details.
VALID-02 Ensure transaction date mismatch (not system date) is flagged and prevented from outbound file generation.
PROC-01 Confirm successful authorization generates text file in OUT folder and PRISM picks it up automatically.
PROC-02 Validate cancellation flow reverts financial postings in core banking and marks batch with code 99.
PROC-03 Test MT-199 inquiry response is delivered back to originating branch and linked to original message.
LIMIT-01 Verify branch-specific cut-off prevents new saves after configured time; HO override still allowed.
CHG-01 Confirm charge engine applies branch-specific fee + FED and stores timestamp immediately after processing.
INTEG-01 Ensure incoming MT ingestion updates dashboards, queues, and triggers treasury notification.
INTEG-02 Validate core banking integration posts debit/credit with correct value date and reverses on failure.
QUEUE-01 Check dashboard segregation between STP and non-STP, with accurate counts/status transitions.
REP-01 Validate Outgoing/Incoming/Summary reports match transaction logs; filters and universal query work.
SEC-01 Confirm user provisioning enforces role limits (branch vs HO vs Treasury).
SEC-02 Ensure complete audit trail captures user IDs, timestamps, action, and before/after values.
PERF-01 Measure end-to-end processing time ≤ defined SLA under high-volume load.
REC-01 Test disaster-recovery/rollback by simulating file upload failure and verifying retry and alerting.

{
  "Scenario": "Branch MT-103 exceeding limit requires HO authorization",
  "MessageType": "MT103",
  "PreparationUser": "BR001_USER1",
  "Branch": "Lahore Mall Road",
  "BeneficiaryBankBIC": "SCBLPKKX",
  "AmountPKR": 25000000,
  "BranchLimitPKR": 20000000,
  "ChargeConfig": {
    "BaseFee": 300,
    "FEDPercent": 16
  },
  "ExpectedOutcome": [
    "Status=Pending HO Authorization",
    "Charge=348 (300 + 16%) with timestamp",
    "HOUser prompts for dual approval"
  ]
}
{
  "Scenario": "Incoming MT-199 correction routed to originating branch",
  "MessageType": "MT199",
  "OriginalMessageRef": "FINCA/001/2023",
  "Issue": "Incorrect Beneficiary Account",
  "ReceivingBank": "HMB7330681",
  "OriginatingBranch": "Karachi Clifton",
  "CorrectionFields": {
    "Field59": "PK15MEZN0049010103450183",
    "BeneficiaryName": "NAEEM TARIQ"
  },
  "ExpectedOutcome": [
    "Branch queue receives MT-199",
    "Operator required to amend original MT-103",
    "Audit log links correction to original message"
  ]
}

Additional Prompt:
7) Create synthetic dataset `cards_com_bal.csv` for MSG-GEN-01 reconciliation with the required schema (dept id, as-of date, balance type, amounts, currencies, system/product identifiers, adjustment and GAAP codes) and store it under a new `data` folder.

Prompt/Output (cards_com_bal.csv):
- Regenerated 120 deterministic records dated `10/22/2025`, covering all balance types (`P`, `C`, `F`, `A`) and each GAAP/adjustment code combination.
- Ensured `dept_id` follows the `XXXX999999999` format with unique values, while `source_system_id` (`XX9999`) and six-digit `product_id` entries repeat to mimic multi-feed aggregation.
- Constrained both `txn_amt` and `base_amt` to ≤ 10,000,000,000.00000; applied Table 2/3 FX multipliers (USD→GBP ×1.2, USD→EUR ×1.5, GBP→EUR ×0.9) with five-decimal rounding for cross-currency rows.
- Dataset saved at `data/cards_com_bal.csv` for ingestion by the regression harness and downstream reconciliation checks.
